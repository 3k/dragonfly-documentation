## Network Inspector ##

The Network Inspector is Opera Dragonfly’s HTTP dashboard. It provides an overview of all HTTP requests such as images, scripts, and style, initiated by the primary webpage (primary HTTP request). The Network Inspector includes a waterfall visualization of the order, time and duration of all network activity. 

### Network log

The first tab of the Network Inspector is the **Network log**. 

In the left column, each URI is preceded with an icon. This provides a visual cue about the resource's file type.

<table style="width:15em;">
<caption>Table of file types and related icons</caption>
<tr>
    <td><img src="img/type_audio.png" alt="audio icon"/></td>
    <td>audio (<code>wav</code>, <code>ogg</code>, …)</td>
</tr>
<tr>
    <td><img src="img/type_data.png" alt="data icon"/></td>
    <td>data</td>
</tr>
<tr>
    <td><img src="img/type_feed.png" alt="feed icon"/></td>
    <td>feed</td>
</tr>
<tr>
    <td><img src="img/type_flash.png" alt="flash icon"/></td>
    <td>flash</td>
</tr>
<tr>
    <td><img src="img/type_font.png" alt="font icon"/></td>
    <td>font (<code>ttf</code>, <code>woff</code>)</td>
</tr>
<tr>
    <td><img src="img/type_image.png" alt="image icon"/></td>
    <td>image (<code>png</code>, <code>webp</code>, <code>jpg</code>, <code>gif</code>, …)</td>
</tr>
<tr>
    <td><img src="img/type_markup.png" alt="markup icon"/></td>
    <td>markup (HTML, XHTML, …)</td>
</tr>
<tr>
    <td><img src="img/type_plugin.png" alt="plugin icon"/></td>
    <td>plugin</td>
</tr>
<tr>
    <td><img src="img/type_script.png" alt="script icon"/></td>
    <td>script (JavaScript, …)</td>
</tr>
<tr>
    <td><img src="img/type_style.png" alt="style icon"/></td>
    <td>style (CSS)</td>
</tr>
<tr>
    <td><img src="img/type_text.png" alt="text icon"/></td>
    <td>text</td>
</tr>
<tr>
    <td><img src="img/type_vector.png" alt="vector icon"/></td>
    <td>vector (SVG)</td>
</tr>
<tr>
    <td><img src="img/type_video.png" alt="video icon"/></td>
    <td>video (<code>ogv</code>, <code>webm</code>, …)</td>
</tr></table>

### Make Request

In a similar way to command-line tools such as <code>curl</code>, the Make Request tab allows you to manually send custom HTTP request to a specific URI and to inspect the HTTP response. 

Opera Dragonfly makes it easy to precisely tailor an HTTP request by specifying the individual HTTP headers. Start by entering the URI for your request in the URL field. This immediately modifies the Request body to make a standard GET request to this URI, using Opera's default HTTP headers. You can manually modify the Request body further by simply editing the generated text. After you send the request, you will see the response from the server, including the response headers. If the response's body contained contained binary data (for instance when making a request for a <code>png</code> image), it will appear truncated.

### Network Options

The third panel provides options for fine-tuning the browser behavior with regards to HTTP requests.

#### Caching behavior

When testing HTTP requests, it is often important to disable all sources of caching, forcing Opera to request and load all resources from the server.

#### Global header overrides

In cases where a site does content negotiation – or, more commonly, serves different content to different user agents – it is sometimes necessary to impersonate another HTTP client such as a bot or a mobile browser in order to verify and debug the content. With global header overrides, Opera's standard request headers can be overriden (to change a particular aspect of the request) or expanded (to include additional headers that aren't normally sent).

The available presets include the default headers (including the <code>User-Agent</code>) of a few common mobile, tablet and desktop browsers. If the particular browser you want to spoof is not available in the list of presets, or if you want to just add or override one specific header, you can further modify the headers in the provided text field. Once you're satisfied with the set of headers that will be sent, make sure to <em>Save</em> your selection.

Note that once an override has been set, it takes effect in the current debugging context for as long as Opera Dragonfly is open, even when switching to other tools like the Console or the Document panel.